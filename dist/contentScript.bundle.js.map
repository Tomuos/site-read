{"version":3,"file":"contentScript.bundle.js","mappings":"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","sources":["webpack://site-read/./src/app/extension/domObserver.js","webpack://site-read/./src/app/extension/fonts.js","webpack://site-read/./src/app/extension/lib/cleanText/cleanText.js","webpack://site-read/./src/app/extension/lib/keepSpacing/keepSpacing.js","webpack://site-read/./src/app/extension/lib/processWord/processWord.js","webpack://site-read/./src/app/extension/lib/removeExtraWhitespace/splitSpaces.js","webpack://site-read/./src/app/extension/lib/spacedElementsList/spacedElementsList.js","webpack://site-read/./src/app/extension/lib/spacingAroundElement/spacingAroundElement.js","webpack://site-read/./src/app/extension/lib/styledSpan/styledSpan.js","webpack://site-read/webpack/bootstrap","webpack://site-read/./src/app/extension/contentScript.js"],"sourcesContent":["function startObserver(callback) {\r\n    const observer = new MutationObserver((mutations) => {\r\n      mutations.forEach((mutation) => {\r\n        if (mutation.type === 'childList') {\r\n          mutation.addedNodes.forEach((node) => {\r\n            if (node.nodeType === Node.ELEMENT_NODE) {\r\n              callback(node);\r\n            }\r\n          });\r\n        }\r\n        if (mutation.type === 'characterData') {\r\n          const parent = mutation.target.parentNode;\r\n          if (parent) {\r\n            callback(parent);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  \r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      characterData: true,\r\n      subtree: true,\r\n    });\r\n  \r\n    return observer;\r\n  }\r\n  \r\n  function stopObserver(observer) {\r\n    if (observer) {\r\n      observer.disconnect();\r\n    }\r\n  }\r\n  \r\n  module.exports = { startObserver, stopObserver };","\r\nfunction injectGoogleFonts() {\r\n    // Avoid injecting multiple times\r\n    if (document.getElementById('myBionicFontsLink')) return;\r\n  \r\n    const link = document.createElement('link');\r\n    link.id = 'myBionicFontsLink';\r\n    link.rel = 'stylesheet';\r\n    link.href = 'https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap';\r\n    document.head.appendChild(link);\r\n  }\r\n  \r\n  /**\r\n   * Get the chosen font from chrome.storage (default to Open Sans if none).\r\n   * This is asynchronous, so we provide a callback or return a Promise.\r\n   */\r\n  function getChosenFont(callback) {\r\n    chrome.storage.sync.get(['chosenFont'], (res) => {\r\n      const font = res.chosenFont || '\"Open Sans\", sans-serif';\r\n      callback(font);\r\n    });\r\n  }\r\n  \r\n  module.exports = {\r\n    injectGoogleFonts,\r\n    getChosenFont\r\n  };\r\n  ","function cleanText (text) {\r\nreturn text.replace(/\\s+/g, ' ').trim();\r\n}\r\n\r\nmodule.exports = cleanText;","function keepSpacing(word) {\r\n       return word.replace(/[^\\w\\s.,!?'\"\":/“”‘’—–-]/g, '');\r\n}\r\n\r\nmodule.exports = keepSpacing;","const keepSpacing = require('../keepSpacing/keepSpacing')\r\n\r\nfunction processWord(word) {\r\n\r\n    \r\n\r\n    const cleanWord = keepSpacing(word); \r\n    \r\n    if (cleanWord.length === 1) {\r\n        return `<strong>${word}</strong>`\r\n    }\r\n    else if (cleanWord.length === 2 ){\r\n        return `<strong>${word.charAt(0)}</strong>${word.charAt(1)}`;\r\n    }\r\n    else if (cleanWord.length === 3){\r\n        return `<strong>${word.substring(0, 2)}</strong>${word.charAt(2)}`\r\n    }\r\n    else if (cleanWord.length > 3){\r\n        const boldMath = Math.ceil(cleanWord.length / 2);\r\n        return `<strong>${word.substring(0, boldMath)}</strong>${word.substring(boldMath)}`\r\n    }\r\n    \r\n    return word;\r\n\r\n}\r\n\r\nmodule.exports = processWord;","// const words = text.split(/(\\s+)/); \r\n\r\nfunction splitSpaces(text) {\r\n  return text.split(/(\\s+)/);\r\n}\r\n\r\nmodule.exports = splitSpaces;","const spacingAroundElement = require('../spacingAroundElement/spacingAroundElement')\r\n\r\nfunction spacingElementsList(root){\r\n    const anchorElement = root.querySelectorAll('a');\r\n    const italicElement = root.querySelectorAll('em');\r\n    // const strongElement = root.querySelectorAll('strong');\r\n    const spanElement = root.querySelectorAll('span');\r\n\r\n\r\n    anchorElement.forEach(element => spacingAroundElement(element));\r\n    italicElement.forEach(element => spacingAroundElement(element));\r\n    // strongElement.forEach(element => spacingAroundElement(element));\r\n    spanElement.forEach(element => spacingAroundElement(element));\r\n\r\n}\r\n\r\nmodule.exports = spacingElementsList;","function spacingAroundElement(element) {\r\n  const prevSibling = element.previousSibling;\r\n  const nextSibling = element.nextSibling;\r\n\r\n  // Ensure space before the element\r\n  if (!prevSibling || prevSibling.nodeType !== Node.TEXT_NODE) {\r\n    element.parentNode.insertBefore(document.createTextNode(' '), element);\r\n  } else if (!prevSibling.nodeValue.endsWith(' ')) {\r\n    prevSibling.nodeValue += ' ';\r\n  }\r\n\r\n  // Ensure space after the element\r\n  if (!nextSibling || nextSibling.nodeType !== Node.TEXT_NODE) {\r\n    element.parentNode.insertBefore(document.createTextNode(' '), nextSibling);\r\n  } else if (!nextSibling.nodeValue.startsWith(' ')) {\r\n    nextSibling.nodeValue = ' ' + nextSibling.nodeValue;\r\n  }\r\n}\r\n\r\nmodule.exports = spacingAroundElement;\r\n","// styledSpan.js\r\n\r\nfunction styledSpan(innerHTML, fontFamily = '\"Open Sans\", sans-serif') {\r\n  const span = document.createElement('span');\r\n  span.style.display = 'inline';\r\n  span.style.whiteSpace = 'normal';\r\n  span.style.fontSize = 'inherit';\r\n  span.style.lineHeight = 'inherit';\r\n\r\n  // If the user chose a specific font, apply it\r\n  span.style.fontFamily = fontFamily;\r\n\r\n  span.innerHTML = innerHTML;\r\n  return span;\r\n}\r\n\r\nmodule.exports = styledSpan;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\r\nconst { injectGoogleFonts, getChosenFont } = require('./fonts.js');\r\n\r\nconst cleanText = require('./lib/cleanText/cleanText');\r\nconst keepSpacing = require('./lib/keepSpacing/keepSpacing');\r\nconst splitSpaces = require('./lib/removeExtraWhitespace/splitSpaces');\r\nconst processWord = require('./lib/processWord/processWord');\r\nconst spacingElementsList = require('./lib/spacedElementsList/spacedElementsList');\r\nconst styledSpan = require('./lib/styledSpan/styledSpan');\r\nconst { startObserver, stopObserver } = require('./domObserver.js');\r\n\r\nlet isSiteReadEnabled = false;\r\nlet observer = null;\r\nlet chosenFont = '\"Open Sans\", sans-serif'; // fallback if none is set\r\n\r\n// Load initial state from storage\r\nchrome.storage.sync.get(['siteReadEnabled'], (result) => {\r\n  isSiteReadEnabled = result.siteReadEnabled || false;\r\n\r\n  if (isSiteReadEnabled) {\r\n    getChosenFont((font) => {\r\n      chosenFont = font;\r\n      injectGoogleFonts();\r\n      applySiteRead(document.body);\r\n      observer = startObserver(applySiteRead);\r\n    });\r\n  }\r\n});\r\n\r\n// Listen for toggle messages from popup\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request.action === 'toggleSiteRead') {\r\n    isSiteReadEnabled = request.state;\r\n    toggleSiteRead();\r\n    sendResponse({ status: 'SiteRead toggled', enabled: isSiteReadEnabled });\r\n  }\r\n});\r\n\r\nchrome.storage.onChanged.addListener((changes, namespace) => {\r\n  if (namespace === 'sync' && changes.chosenFont) {\r\n    chosenFont = changes.chosenFont.newValue || '\"Open Sans\", sans-serif';\r\n    injectGoogleFonts();\r\n\r\n    // 🔥 FIRST: Revert spans back to plain text nodes before reprocessing\r\n    document.querySelectorAll('span[data-bionic-processed=\"true\"]').forEach((span) => {\r\n      span.replaceWith(span.textContent);\r\n    });\r\n\r\n    // 🔥 SECOND: Clear dataset flags from parent elements to force full reprocessing\r\n    document.querySelectorAll('[data-bionic-processed=\"true\"]').forEach((el) => {\r\n      delete el.dataset.bionicProcessed;\r\n    });\r\n\r\n    // 🔥 FINALLY: Apply the reading style again\r\n    applySiteRead(document.body);\r\n  }\r\n});\r\n\r\nfunction applySiteRead(root = document.body) {\r\n  if (!isSiteReadEnabled) return;\r\n\r\n  const elements = root.querySelectorAll(\r\n    'p, li, a, em, ul, ol, div, span, article, section'\r\n  );\r\n  \r\n  elements.forEach((element) => {\r\n    if (element.dataset.bionicProcessed === 'true') return;\r\n\r\n    let didProcess = false;\r\n\r\n    element.childNodes.forEach((node) => {\r\n      if (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() !== '') {\r\n        didProcess = true;\r\n        const text = cleanText(node.nodeValue);\r\n        const processedText = splitSpaces(text)\r\n          .map(keepSpacing)\r\n          .map(processWord)\r\n          .join('');\r\n\r\n        // Pass chosenFont to styledSpan\r\n        const span = styledSpan(processedText, chosenFont);\r\n\r\n        span.dataset.bionicProcessed = 'true';\r\n        node.replaceWith(span);\r\n      }\r\n    });\r\n\r\n    if (didProcess) {\r\n      element.dataset.bionicProcessed = 'true';\r\n    }\r\n  });\r\n\r\n  spacingElementsList(root);\r\n}\r\n\r\n\r\nfunction toggleSiteRead() {\r\n  if (isSiteReadEnabled) {\r\n    getChosenFont((font) => {\r\n      chosenFont = font;\r\n      injectGoogleFonts();\r\n      applySiteRead(document.body);\r\n      observer = startObserver(applySiteRead);\r\n    });\r\n  } else {\r\n    stopObserver(observer);\r\n    location.reload(); // Reload page to reset DOM\r\n  }\r\n}\r\n\r\n\r\n"],"names":["module","exports","startObserver","callback","observer","MutationObserver","mutations","forEach","mutation","type","addedNodes","node","nodeType","Node","ELEMENT_NODE","parent","target","parentNode","observe","document","body","childList","characterData","subtree","stopObserver","disconnect","injectGoogleFonts","getElementById","link","createElement","id","rel","href","head","appendChild","getChosenFont","chrome","storage","sync","get","res","font","chosenFont","text","replace","trim","word","keepSpacing","cleanWord","length","charAt","substring","boldMath","Math","ceil","split","spacingAroundElement","root","anchorElement","querySelectorAll","italicElement","spanElement","element","prevSibling","previousSibling","nextSibling","TEXT_NODE","nodeValue","endsWith","insertBefore","createTextNode","startsWith","innerHTML","fontFamily","span","style","display","whiteSpace","fontSize","lineHeight","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","cleanText","splitSpaces","processWord","spacingElementsList","styledSpan","isSiteReadEnabled","applySiteRead","dataset","bionicProcessed","didProcess","childNodes","processedText","map","join","replaceWith","result","siteReadEnabled","runtime","onMessage","addListener","request","sender","sendResponse","action","state","location","reload","status","enabled","onChanged","changes","namespace","newValue","textContent","el"],"sourceRoot":""}